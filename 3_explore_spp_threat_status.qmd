---
title: "Spp exploration - threatened status"
format: 
  html:
    embed-resources: true
execute:
  warning: false
  message: false
---

```{r}
library(tidyverse)
library(terra)
library(sf)
library(rnaturalearth)
library(here)
library(iucnredlist) ### remotes::install_github("IUCN-UK/iucnredlist")
```

## Gather data and test IUCN API

Grab a sample of species (5 spp for each taxon) and test out IUCN API

### Identify species sample

```{r}
here_anx <- function(f = '', ...) { 
  ### create file path to git-annex dir for project
  f <- paste(f, ..., sep = '/')
  f <- stringr::str_replace_all(f, '\\/+', '/')
  f_anx <- sprintf('/home/shares/usgs-cap-rangeshifts/data_lawler_2020/%s', f)
  return(f_anx)
}
```

List all map files available, and gather info on species, taxon, and scenario from the file path information.

```{r}
spp_mapfiles <- list.files(here_anx('species_projections'), 
                           full.names = TRUE, recursive = TRUE, pattern = '.tif')
spp_all_df <- data.frame(f = spp_mapfiles,
                         spp = basename(spp_mapfiles) %>%
                           str_remove('(_gf85|_in85|_mc85|_bias).+') %>%
                           str_replace_all('_', ' '),
                         tax = basename(dirname(spp_mapfiles)))

### sample 5 species per taxon, and identify all scenario maps for each
set.seed(16)
spp_sample_df <- spp_all_df %>%
  select(-f) %>%
  distinct() %>%
  group_by(tax) %>%
  slice_sample(n = 5) %>%
  ungroup() 
  #left_join(spp_all_df)
```

### Pull IUCN threat status

We'll use the IUCN api (key required) and their R package (iucnredlist)

```{r}
api_key <- Sys.getenv("IUCN_API_KEY") ### usethis::edit_r_environ() to add key to R environment file
api <- init_api(api_key)
```

```{r}
# Test out getting threat information for a single species (not case sensitive)
spp_test <- assessments_by_name(api, genus = "Canis", species = "lupus")

# Looking at spp_test, the latest global assessment is assessment ID 247624660
assessment <- assessment_data(api, 247624660)
assessment_clean <- parse_assessment_data(assessment)
```

```{r}
# Test to filter the spp_test df for the latest global threat level for the species
spp_latest_threat <- spp_test %>% 
  filter(scopes_code == 1 & latest == TRUE)
```

```{r}
# Will need to split spp name into genus and species for redlist package
spp_gns_sample_df <- spp_sample_df %>% 
  separate(spp, into = c("genus", "species"), sep = " ")

spp_sample_vec <- spp_gns_sample_df$species
gns_sample_vec <- spp_gns_sample_df$genus
```

```{r}
# Write a function to get the most recent, global iucn status for a species
iucn_status <- function(api, genus, species){
  # get species info 
 species_info <- assessments_by_name(api, genus, species) 
 list_status <- species_info %>% 
   filter(scopes_code == 1 & latest == TRUE) 
 return(list_status$red_list_category_code)
}
```

```{r}
# Test function
# Species 10 (Ptilogonys cinereus does not work) --> need to look into
iucn_status(api, gns_sample_vec[9], spp_sample_vec[9])
iucn_status(api, 'Ptiliogonys', 'cinereus')
### Ptiliogonys cinereus (typo in the data) seems to work!  but we can bet there will be other typos
```

```{r}
# Loop through function
iucn_status_test <- for(i in 1:9){
  test <- iucn_status(api, gns_sample_vec[i], spp_sample_vec[i])
  print(test)
}
```

```{r}
# Loop through function, save as list
iucn_status_list <- list()
for(i in 1:9){
  test <- iucn_status(api, gns_sample_vec[i], spp_sample_vec[i])
  iucn_status_list[[i]] <- test
}
```

### Get the latest global assesments for a taxon level (kingdom, phylum, class, order, or family) and then merge data into sample species

```{r}
plethodontidae <- assessments_by_taxonomy(api, level = "family", name = "plethodontidae", 
                                          latest = TRUE, scope_code = 1, wait_time = 0.5)
```

```{r}
canidae <- assessments_by_taxonomy(api, level = "family", name = "canidae", 
                                          latest = TRUE, scope_code = 1, wait_time = 0.5)
```

```{r}
# Fetch assessment data for assessment IDs
canidae_data <- assessment_data_many(api, canidae$assessment_id, wait_time = 0.5)
```

```{r}
# Extract the IUCN status from all the canidae assesments (or any other variable of interest)
canidae_names <- extract_element(canidae_data, "taxon")
canidae_iucn_status <- extract_element(canidae_data, "red_list_category")

candidae_taxon_status <- left_join(canidae_names, canidae_iucn_status, by = "assessment_id")
```

### This could be a method for getting a lot of species information at once using the latest, global assessments. 

```{r}
# Test out Bermuda
bm <- assessments_by_group(api, group = "countries", code = "BM", latest = TRUE, wait_time = 0.5)
```

```{r}
# Test out Bermuda
bm_all <- assessments_by_group(api, group = "countries", code = "BM", latest = FALSE, wait_time = 0.5)
```

### Test out iucn id function where instead of pulling the species IUCN list status, pull the species Assesment ID. 
### Then can run a bunch of the assessment IDs and get more of the information we're interested in.

```{r}
# Write a function to get the most recent, global iucn status for a species
iucn_id <- function(api, genus, species){
  # get species info 
 species_info <- assessments_by_name(api, genus, species) 
 list_status <- species_info %>% 
   filter(scopes_code == 1 & latest == TRUE) 
 return(list_status$assessment_id)
}
```

```{r}
# Loop through function, save as list
iucn_id_list <- list()
for(i in 1:9){
  test <- iucn_id(api, gns_sample_vec[i], spp_sample_vec[i])
  iucn_id_list[[i]] <- test
}
```

```{r}
id_vector <- unlist(iucn_id_list)
```

```{r}
id_data <- assessment_data_many(api, id_vector, wait_time = 0.5)
```

```{r}
# Extract the IUCN status from all the sample species (or any other variable of interest)
# Run element_names() to see what you can extract
id_names <- extract_element(id_data, "taxon")
id_iucn_status <- extract_element(id_data, "red_list_category")
id_pop_trends <- extract_element(id_data, "population_trend")

id_names_status <- left_join(id_names, id_iucn_status, by = "assessment_id")
id_names_status_trends <- left_join(id_names_status, id_pop_trends, by = "assessment_id")
```

# Note - Anaxyrus californicus (arroyo toad) may be a species that moves between US/MX
