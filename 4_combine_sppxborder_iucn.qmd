---
title: "IUCN + spp crossing borders"
format: 
  html:
    embed-resources: true
execute:
  warning: false
  message: false
---

```{r}
library(tidyverse)
library(terra)
library(sf)
library(rnaturalearth)
library(here)
library(iucnredlist) ### remotes::install_github("IUCN-UK/iucnredlist")
```

## Gather maps and aggregate

Following the method in 2_combine_spp_scenarios.qmd: 
Grab a sample of species (10 spp for each taxon), gather all future scenario maps and aggregate, summing and dividing by 3 to make a "probability" map for future distributions, and crop to just the lower 48 US states (and a little Canada and Mexico).  Then crop the historical maps to the same extent.  

### Identify species sample

```{r}
here_anx <- function(f = '', ...) { 
  ### create file path to git-annex dir for project
  f <- paste(f, ..., sep = '/')
  f <- stringr::str_replace_all(f, '\\/+', '/')
  f_anx <- sprintf('/home/shares/usgs-cap-rangeshifts/data_lawler_2020/%s', f)
  return(f_anx)
}
```

List all map files available, and gather info on species, taxon, and scenario from the file path information.

```{r}
spp_mapfiles <- list.files(here_anx('species_projections'), 
                           full.names = TRUE, recursive = TRUE, pattern = '.tif')
spp_all_df <- data.frame(f = spp_mapfiles,
                         spp = basename(spp_mapfiles) %>%
                           str_remove('(_gf85|_in85|_mc85|_bias).+') %>%
                           str_replace_all('_', ' '),
                         tax = basename(dirname(spp_mapfiles)))

### sample 10 species per taxon, and identify all scenario maps for each
set.seed(42)
spp_sample_df <- spp_all_df %>%
  select(-f) %>%
  distinct() %>%
  group_by(tax) %>%
  slice_sample(n = 10) %>%
  ungroup() %>%
  left_join(spp_all_df)
```

### Aggregate future projections

For each species in the sample, aggregate the three future scenarios into a single map.  Crop to the lower continental US states.

```{r}
### set up extent for continental US
us_extent <- ext(c(xmin = -130, xmax = -65, ymin = 23, ymax = 50))

### Define aggregation function
agg_scenario <- function(s, df, scenario = 'future') {
  ### for species s, filter historical map files from df; rasterize; mean
  
  if(scenario == 'future') { ### filter to non-Historical
    s_df <- df %>%
      filter(spp == s & !str_detect(f, 'Historical'))
  } else { ### else filter to Historical
    s_df <- df %>%
      filter(spp == s & str_detect(f, 'Historical'))
  }
  s_map <- rast(s_df$f) %>%
    crop(us_extent) %>%
    sum(na.rm = TRUE)
  s_map <- s_map / nrow(s_df)
  return(s_map)
}

### Aggregate over the vector of species names
spp_vec <- spp_sample_df$spp %>% unique()

future_rast <- lapply(spp_vec, FUN = agg_scenario, df = spp_sample_df) %>%
  setNames(spp_vec) %>%
  rast()

x <- future_rast[[1]]
#plot(x, main = names(future_rast)[1])
```

### crop historical maps

```{r}
hist_rast <- lapply(spp_vec, FUN = agg_scenario, df = spp_sample_df, 
                    scenario = 'historical') %>%
  setNames(spp_vec) %>%
  rast()

x <- hist_rast[[1]]
#plot(x, main = names(hist_rast)[1])

```

## Generate jurisdiction map

Let's generate a simple jurisdiction map - US states, and Canada and Mexico.

```{r}
states_sf <- ne_states(returnclass = 'sf', country = c('Mexico', 'Canada', 'United States of America')) 

state_id_df <- states_sf %>%
  st_drop_geometry() %>%
  mutate(juris = ifelse(adm0_a3 == 'USA', name, admin)) %>%
  select(id = gn_id, juris)
### plot(states_sf %>% select(iso_a2))
states_rast <- rasterize(states_sf, hist_rast, field = 'gn_id')
#plot(states_rast)
```

## Rough pass at classification?

For each spp let's create a dataframe of jurisdictions and cell values...

```{r}
extract_jurisdictions <- function(spp, future_r, hist_r, juris_r) {
  ### spp <- spp_vec[1]
  ### future_r = future_rast; hist_r = hist_rast; juris_r = states_rast
  s_f_r <- future_r[[names(future_r) == spp]]
  s_h_r <- hist_r[[names(hist_r) == spp]]
  s_df <- data.frame(values(s_h_r), 
                     values(s_f_r), 
                     values(juris_r)) %>%
    setNames(c('historical', 'future', 'id')) %>%
    filter(!is.na(id)) %>%
    filter(!is.na(historical) | !is.na(future)) %>%
    group_by(id) %>%
    summarize(n_historical = sum(historical > .25),
              n_future = sum(future > .5))
  
  return(s_df)
}

state_spp_list <- lapply(spp_vec, FUN = extract_jurisdictions,
                         future_r = future_rast, 
                         hist_r = hist_rast,
                         juris_r = states_rast) %>%
  setNames(spp_vec) %>%
  bind_rows(.id = 'spp') %>%
  left_join(state_id_df, by = 'id') %>%
  ### note, Canada and Mexico have multiple jurisdictions (provinces and states)
  ### so sum up all those instances
  group_by(spp, juris) %>%
  summarize(n_historical = sum(n_historical),
            n_future = sum(n_future), 
            .groups = 'drop')
```

### Interpret results

Interpret historical and future cell counts into entry/exit/no presence/continued presence.  NOTE: probably would want to throw a threshold on the cell counts, like at least 10 cells to actually register...

```{r}
all_juris_df <- state_spp_list %>%
  mutate(status = case_when(n_historical == 0 &  n_future > 0 ~ 'entry into new',
                            n_historical > 0  & n_future == 0 ~ 'exit from historical',
                            n_historical == 0 & n_future == 0 ~ 'no presence',
                            TRUE ~ 'continued presence'))

all_juris_df$status %>% table()
```

```{r}
entry_exit <- all_juris_df %>% 
  filter(status %in% c("entry into new", "exit from historical")) #%>% 
  #separate(spp, into = c("genus", "species"), sep = " ", remove = FALSE) %>% 
  #rename(scientific_name = spp)
```

```{r}
#Fix incorrect scientific names for IUCN search
entry_exit_clean <- entry_exit %>% 
  mutate(scientific_name = case_when(spp == "Aspidoscelis arizonae" ~ "Aspidoscelis inornatus",
                                     spp == "Phalacrocorax urile" ~ "Urile urile",
                                     spp == "Tamias alpinus" ~ "Neotamias alpinus",
                                     spp == "Zoothera naevia" ~ "Ixoreus naevius",
                                     TRUE ~ spp)) %>% 
  separate(scientific_name, into = c("genus", "species"), sep = " ", remove = FALSE)
```

```{r}
# How many unique species enter/exit jurisdiction in this sample?
length(unique(entry_exit_clean$scientific_name))
# 58
```

```{r}
entry_exit_summary <- entry_exit_clean %>% 
  group_by(scientific_name, genus, species) %>% 
  # Could entry or exit 
  summarise(juris_count = n()) %>% 
  ungroup() 
```

### Add IUCN information

For those species that enter into a new area or exit an area, add IUCN information.
Based on code in 3_explore_spp_threat_status.qmd

```{r}
api_key <- Sys.getenv("IUCN_API_KEY") ### usethis::edit_r_environ() to add key to R environment file
api <- init_api(api_key)
```

```{r}
# Need genus and species for redlist package
gns_vec <- entry_exit_summary$genus
spp_vec <- entry_exit_summary$species
```

```{r}
# Write a function to get the most recent, global iucn assessment id for each species
iucn_id <- function(api, genus, species){
  # get species info 
 species_info <- assessments_by_name(api, genus, species) 
 list_status <- species_info %>% 
   filter(scopes_code == 1 & latest == TRUE) #%>% 
   #filter(year_published == max(year_published))
 return(list_status$assessment_id)
}
```

```{r}
#az_whiptail <- assessments_by_name(api, "Aspidoscelis", "arizonae")
#Aspidoscelis arizonae
#old name is Aspidoscelis inornatus
az_whiptail <- assessments_by_name(api, "Aspidoscelis","inornatus")
spp_vec[9] <- "inornatus"
```

```{r}
# Loop through function, save as list
# Issues with Aspidoscelis arizonae
iucn_id_list <- list()
for(i in 1:length(gns_vec)){
  test <- iucn_id(api, gns_vec[i], spp_vec[i])
  iucn_id_list[[i]] <- test
}
```

```{r}
id_vector <- unlist(iucn_id_list)
```

```{r}
#az_whiptail <- assessments_by_name(api, "Aspidoscelis", "arizonae")
#Aspidoscelis arizonae
#old name is Aspidoscelis inornatus (need to fix in df as well)
az_whiptail <- assessments_by_name(api, "Aspidoscelis", "inornatus")
spp_vec[9] <- "inornatus"
```

```{r}
# Urile urile
gns_vec[36] <- "Urile"
```

```{r}
# Neotamias alpinus
gns_vec[50] <- "Neotamias"
```

```{r}
# Ixoreus naevius (Zoothera naevia)
gns_vec[58] <- "Ixoreus" 
spp_vec[58] <- "naevius"
```


```{r}
# Run the assessment numbers collected from the iucn_id function
id_data <- assessment_data_many(api, id_vector, wait_time = 0.5)
```

```{r}
# Extract the IUCN status from all the sample species (or any other variable of interest)
# Run element_names() to see what you can extract
id_names <- extract_element(id_data, "taxon")
id_iucn_status <- extract_element(id_data, "red_list_category")
id_pop_trends <- extract_element(id_data, "population_trend")

id_names_status <- left_join(id_names, id_iucn_status, by = "assessment_id")
id_names_status_trends <- left_join(id_names_status, id_pop_trends, by = "assessment_id")
```

# note - Dipodomys ingens (Giant Kangaroo Mouse) endangered in this sample and exiting California into Mexico

```{r}
# Merge in entry / exit information 
entry_exit_iucn <- inner_join(entry_exit_clean, id_names_status_trends, by = "scientific_name")
```

# note - Fratercula corniculata (horned puffin) is showing up in the historical data in historical data in places like New Mexico ... but less than 10 cells

# What about seeing which species are only native to the three countries?

```{r}
id_loc <- extract_element(id_data, "locations")
```

```{r}
# Add a column for country to merge in country level location information
# There is some US-state level infomration, but country level should capture what we need for now
entry_exit_iucn <- entry_exit_iucn %>% 
  mutate(country = case_when(juris == "Canada" ~ "Canada",
                             juris == "Mexico" ~ "Mexico",
                             TRUE ~ "United States"))
```

```{r}
entry_exit_iucn_loc <- left_join(entry_exit_iucn, (id_loc %>% 
                                                      rename(country = description)),
                                  by = join_by(country, assessment_id))

# There's a few examples here where the species is moving into Canada, so there is no IUCN location information about the species in Canada
```

# Which of the species in the entry/exit df are endemic species? (would be for CA/US/MX)

```{r}
endemic_species <- entry_exit_iucn_loc %>% 
  filter(is_endemic == TRUE) 

endemic_species_vec <- unique(endemic_species$scientific_name)
```

```{r}
# Filter entry_exit_iucn_loc for the endemic species (want to get all the entries)
entry_exit_endemic_spp <- entry_exit_iucn_loc %>% 
  filter(scientific_name %in% endemic_species_vec)
```

```{r}
# Stats - table is helpful to view which endemic species are moving between jurisdictions 
# 17 endemic species in the sample of 58 species entering or exiting jurisdictions
# Anolis carolinensis, Batrachoseps wrighti (NT), Brodiaea minor, Desmognathus wrighti(NT), Neotamias alpinus, Plethodon shermani (NT) entering CA
# Plethodon wehrlei entering CA
# Dipodomys ingens (EN), Microtus breweri (VU), Neotamias alpinus, Plethodon shermani (NT), Plethodon wehrlei entering MX
# Peromyscus polionotus exiting from CA and MX
entry_exit_endemic_summary <- entry_exit_endemic_spp %>% 
  group_by(scientific_name, status, index.y, description.x, index.x.x, description.y,
           country, is_endemic, origin) %>% 
  summarize(n_juris = n(),
            n_historical = sum(n_historical),
            n_future = sum(n_future)) %>% 
  ungroup()
```

```{r}
# Filter further for those entering/exiting CA and MX
# 11 species moving in or out of mexico
entry_exit_CA_MX_summary <- entry_exit_endemic_spp %>% 
  filter(country != "United States")

# These species are endemic to the US
CA_MX_summary <- entry_exit_CA_MX_summary %>% 
  group_by(description.x, juris, status, description.y) %>% 
  summarize(n_species = n()) %>% 
  rename(red_list_cat = description.x,
         population_trend = description.y)
```

## Next step - add maps for the non-least concern species in the CA_MX_summary table
